# !/usr/bin/env python

import sys
sys.path.insert(1, "/home/ross/EuPathGalaxy/Tools/lib/python/")
#sys.path.insert(0, "/opt/galaxy/tools/eupath/Tools/lib/python")
from eupath import NewEupathExporter
import optparse
import sys
import re
from subprocess import check_output




def main():
    pass

    parser = optparse.OptionParser()
    (options, args) = parser.parse_args()    

    # So users are greeted with a bewildering traceback
    sys.tracebacklimit = 0

    # This class/function can be made in a new file where the file handler below can be created. 
    # maybe in Tools/bin/exportSNPDataToEuPathDB
    class FileValidator():

        def validate(files): 
            pass

            # some logic for an error message. 



    class VCFFileHandler(NewEupathExporter.BaseFileHandler):

        # Constants
        TYPE = "VCFFile"
        VERSION = "1.0"

        def __init__(self):
            NewEupathExporter.BaseFileHandler.__init__(self, 
            VCFFileHandler.TYPE, 
            VCFFileHandler.VERSION,
            NewEupathExporter.FileCollector,
            NewEupathExporter.Exporter,
            FileValidator,
            args
            )


        def validation(self):
            try:
                print >> sys.stdout, "Try export."
                # FileValidator.validate(FileCollector.files)
                print >> sys.stdout, "Validation success."
            except:
                print >> sys.stdout, "Fail 1."    

            # print >> sys.stdout, self.TYPE 

            print >> sys.stdout, self._type
            print >> sys.stdout, self._version
            print >> sys.stdout, self._filecollector
            print >> sys.stdout, self._exporter
            print >> sys.stdout, self._validator



    worker = VCFFileHandler()
    worker
    worker.validation()
        




if __name__ == "__main__":
    sys.exit(main())