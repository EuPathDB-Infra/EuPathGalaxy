#!/usr/bin/perl
use strict;

&usage() unless scalar(@ARGV) == 5;
my $selfSimilarityFile = $ARGV[0];
my $groupsFile = $ARGV[1];
my $taxonAbbrev = $ARGV[2];
my $outputDir = $ARGV[3];
my $log = $ARGV[4];

my $threshold = -5;
my $minPercentMatch = 50;

# correct for 0 exponent (do this upstream)

open(LOG, ">$log") || die "could not open log file '$log'";

###########################################
# make hash of orthomcl proteins to groups
###########################################

die "groups file '$groupsFile' does not exist\n" unless -e $groupsFile;

if ($groupsFile =~ m/\.gz$/) {
  open(G, "gunzip -c $groupsFile |") or die "can't open groups file '$groupsFile'\n";
}
else {
  open(G, $groupsFile) or die "can't open groups file '$groupsFile'\n";
}

my $proteinGroupHash;
print LOG "\nScanning groups file $groupsFile to build hash\n";
my $count;
while(<G>) {
  print LOG "." if ($count++ % 10000) == 0;
    my @line = split(/\s/);
    my $group = shift(@line);
    $group =~ s/\://;
    foreach my $protein (@line) {
	$proteinGroupHash->{$protein} = $group;
    }
}
close(G);
close(T);

####################################################################
# scan similarities of input v. orthomcl to find ortholog assignments
####################################################################
# find group based on best match of user's protein
# also, while scanning, remember the best out-species hit for each input
# protein, used in second pass paralog processing
my $prevQueryId;
my $bestOutSpeciesHits;

open(ORTHO, ">$outputDir/orthologGroups") || die "Can't open orthologGroups '$outputDir/orthologGroups' file for writing\n";
open(ASSIGNED, ">$outputDir/assignedProteins") || die "Can't open assignedProteins '$outputDir/orthologGroups' file for writing\n";

if ($similarityFile =~ m/\.gz$/) {
  open(S, "gunzip -c $similarityFile |") or die $!;
}
else {
  open(S, "<$similarityFile") or die $!;
}

print LOG "\nScanning similarity file $similarityFile\n";
while(<S>) {
  print LOG ":" if ($count++ % 100000) == 0;
    my ($q_id, $s_id, $q_taxon, $s_taxon, $evalue_mant, $evalue_exp, $pctIdent, $pctMatch) = split(/\s/);

    next if $q_id eq $s_id;
    $evalue_exp = -181 unless $evalue_exp;

    # for now, use simple algorithm:  assign ortholog group based on best hit.
    if ($q_id ne $prevQueryId && $evalue_exp <= $threshold && $pctMatch >= $minPercentMatch) {
      my $q_id2 = $q_id;
      # strip off taxon prefix before printing final result 
      # (it may be a fake taxon prefix)
      $q_id2 =~ s/$taxonAbbrev\|//;
      my $g = $proteinGroupHash->{$s_id}? $proteinGroupHash->{$s_id} : "NO_GROUP";
      print ORTHO "$q_id2\t$g\t$s_id\t$evalue_mant\t$evalue_exp\t$pctIdent\t$pctMatch\n";
      $prevQueryId = $q_id;
      $bestOutSpeciesHits->{$q_id} = [$evalue_mant, $evalue_exp];
      print ASSIGNED "$q_id\n";
    }
}
close(ORTHO);
close(ASSIGNED);
close(S);

sub usage {
    print STDERR "
Map an input proteome to OrthoMCL groups, based on a provided sequence similarity file.  Maps to the
group containing the most similar protein.

usage:  orthomclMapSimilarProteinsToGroups similarity_file groups_file taxon_abbrev output_dir log

where:
  similarity_file:         concise (orthomcl-style) similarity output for input
                           proteome v. orthomcl proteins, sorted by query_id,
                           evalue (gzipped file supported).
  groups_file              standard orthomcl groups file
  taxon_abbrev             taxon abbreviation that has been prepended to protein IDs
  output_dir:              where to write output files
  log                      log file path

note: simseqs format output by blastSimilarity is sorted by query_id, evalue

output:
  output_dir/orthologGroups  - groups with new proteins added
  output_dir/assignedProteins  - proteins that have been successfully assigned to groups
";
    exit(1);
}

